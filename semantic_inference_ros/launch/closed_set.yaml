---
launch:
  # segmentation model options. Make sure you have one downloaded. Options:
  # - ade20k-hrnetv2-c1
  # - ade20k-mobilnetv2dilated-c1_deepsup
  - arg: {name: model_name, default: ade20k-efficientvit_seg_l2, description: Model to use}
  - arg: {name: use_prerecorded, default: 'false', description: Remap prerecorded labels}
  - arg: {name: force_rebuild, default: 'false', description: Force TensorRT to rebuild engine}
  # Input configuration
  - arg: {name: compressed_rgb, default: false, description: Triggers decompression for RGB stream}
  - arg: {name: rgb_image_transport, default: $(eval 'compressed' if compressed_rgb else 'raw')}
  - arg: {name: max_image_queue_size, default: '1', description: Max number of images to store}
  - arg: {name: min_separation_s, default: '0.0', description: Time separation between inputs}
  - arg: {name: rotation_type, default: none, description: Input camera rotation}
  # Colormap and label grouping
  - arg: {name: labelspace_name, default: ade20k_mp3d, description: Label remapping configuration}
  - arg: {name: colormap_path, default: $(find-pkg-share semantic_inference)/config/distinct_150_colors.csv, description: Visualization colormap}
  - node:  # 2D semantic segmentation
      unless: $(var use_prerecorded_semantics)
      pkg: semantic_inference_ros
      exec: segmentation_node
      name: semantic_inference
      on_exit: shutdown
      param:
        - {from: $(find-pkg-share semantic_inference)/config/models/$(var model_name).yaml}
        - {from: $(find-pkg-share semantic_inference)/config/label_groupings/$(var labelspace_name).yaml}
        - {name: segmenter/model/model_file, value: $(find-pkg-share semantic_inference)/models/$(var model_name).onnx}
        - {name: segmenter/model/engine_file, value: $(find-pkg-share semantic_inference)/engines/$(var model_name).trt}
        - {name: segmenter/model/force_rebuild, value: $(var force_rebuild)}
        - {name: output/recolor/colormap_path, value: $(var colormap_path)}
        - {name: worker/max_queue_size, value: $(var max_image_queue_size)}
        - {name: worker/image_separation_s, value: $(var min_separation_s)}
        - {name: image_rotator/rotation, value: $(var rotation_type)}
  - node:  # Remapping pre-recorded labels
      if: $(var use_prerecorded_semantics)
      pkg: semantic_inference_ros
      exec: recolor_node
      name: semantic_inference
      on_exit: shutdown
      param:
        - {from: $(find-pkg-share semantic_inference)/config/label_groupings/$(var labelspace_name).yaml}
        - {name: worker/max_queue_size, value: $(var max_image_queue_size)}
        - {name: worker/image_separation_s, value: $(var min_separation_s)}
