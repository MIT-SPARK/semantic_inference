---
launch:
  # segmentation model options. Make sure you have one downloaded. Options:
  # - ade20k-hrnetv2-c1
  # - ade20k-mobilnetv2dilated-c1_deepsup
  - arg: {name: model_name, default: ade20k-efficientvit_seg_l2, doc: Model to use}
  # Launch file features
  - arg: {name: debug, default: false, doc: Run segmentation with gdb}
  - arg: {name: verbose, default: true, doc: Set segmentation log output to stdout}
  - arg: {name: use_prerecorded, default: false, doc: Remap prerecorded labels}
  - arg: {name: force_rebuild, default: false, doc: Force TensorRT to rebuild engine}
  # Input configuration
  - arg: {name: compressed_rgb, default: false, doc: Triggers decompression for RGB stream}
  - arg: {name: rgb_image_transport, default: $(eval 'compressed' if compressed_rgb else 'raw')}
  - arg: {name: max_image_queue_size, default: 1, doc: Max number of images to store}
  - arg: {name: min_separation_s, default: 0.0, doc: Time separation between inputs}
  - arg: {name: rotation_type, default: none, doc: Input camera rotation}
  # Colormap and label grouping
  - arg: {name: labelspace_name, default: ade20k_mp3d, doc: Label remapping configuration}
  - arg: {name: colormap_path, default: $(find semantic_inference)/config/distinct_150_colors.csv,
      doc: Visualization colormap}
  - let: {name: prefix, default: $(eval 'gdb -ex run --args' if debug else '')}
  - node:  # 2D semantic segmentation
      pkg: semantic_inference_ros
      exec: segmentation_node
      name: semantic_inference
      unless: $(arg use_prerecorded_semantics)
      args: load semantic_inference/segmentation $(arg nodelet_manager) --no-bond
      output: $(eval 'screen' if verbose else 'log')
      required: true
      param:
        - {from: $(find semantic_inference)/config/models/$(arg model_name).yaml}
        - {from: $(find semantic_inference)/config/label_groupings/$(arg labelspace_name).yaml,
          ns: output/recolor}
        - {name: segmenter/model/model_file, value: $(find semantic_inference)/models/$(arg
            model_name).onnx}
        - {name: segmenter/model/engine_file, value: $(find semantic_inference)/engines/$(arg
            model_name).trt}
        - {name: segmenter/model/force_rebuild, value: $(arg force_rebuild)}
        - {name: output/recolor/colormap_path, value: $(arg colormap_path)}
        - {name: worker/max_queue_size, value: $(arg max_image_queue_size)}
        - {name: worker/image_separation_s, value: $(arg min_separation_s)}
        - {name: image_rotator/rotation, value: $(arg rotation_type)}
  - node: # Remapping pre-recorded labels
      pkg: nodelet
      type: recolor_node
      name: semantic_inference
      args: load semantic_inference/recolor $(arg nodelet_manager) --no-bond
      output: $(eval 'screen' if verbose else 'log')
      required: true
      if: $(arg use_prerecorded_semantics)
      param:
        - {from: $(find semantic_inference)/config/label_groupings/$(arg labelspace_name).yaml,
          ns: output/recolor}
        - {name: worker/max_queue_size, value: $(arg max_image_queue_size)}
        - {name: worker/image_separation_s, value: $(arg min_separation_s)}
