---
launch:
  # Segmentation configuration
  - arg:
      name: model_name
      # Other model options:
      # - ade20k-hrnetv2-c1
      # - ade20k-mobilnetv2dilated-c1_deepsup
      default: ade20k-efficientvit_seg_l2
      description: >
        Model to use (typically the filename without the .onnx extension).
        Can be specified as an absolute path, but requires settings 'model_config' to the correct filepath.
  - arg: {name: model_config, default: $(find-pkg-share semantic_inference_ros)/config/models/$(var model_name).yaml, description: Model-specific configuration}
  - arg: {name: use_prerecorded, default: 'false', description: Remap prerecorded labels}
  - arg: {name: force_rebuild, default: 'false', description: Force TensorRT to rebuild engine}
  - arg: {name: container_name, default: closed_set_container}
  # Input configuration
  - arg: {name: max_image_queue_size, default: '1', description: Max number of images to store}
  - arg: {name: min_separation_s, default: '0.0', description: Time separation between inputs}
  - arg: {name: rotation_type, default: none, description: Input camera rotation}
  # Colormap and label grouping
  - arg: {name: labelspace_name, default: ade20k_mp3d, description: Label remapping configuration}
  - arg: {name: colormap_path, default: $(find-pkg-share semantic_inference_ros)/config/distinct_150_colors.csv, description: Visualization colormap}
  # nodes
  - arg: {name: compressed_rgb, default: 'false', description: Triggers decompression for RGB stream}
  - node:
      if: $(var compressed_rgb)
      pkg: image_transport
      exec: republish
      name: decompress_rgb
      param:
        - {name: in_transport, value: compressed}
        - {name: out_transport, value: raw}
      remap:
        - {from: in/compressed, to: color/image_raw/compressed}
        - {from: out, to: color/image_raw}
  - node_container:  # 2D semantic segmentation
      pkg: rclcpp_components
      exec: component_container_mt
      name: $(var container_name)
      namespace: ''
      on_exit: shutdown
      args: >
        --config-utilities-file $(var model_config)
        --config-utilities-file $(find-pkg-share semantic_inference_ros)/config/label_groupings/$(var labelspace_name).yaml@output/recolor
        --config-utilities-yaml {segmenter: {model: {model_file: $(var model_name).onnx, force_rebuild: $(var force_rebuild)}}}
        --config-utilities-yaml {output: {recolor: {colormap_path: $(var colormap_path)}}}
        --config-utilities-yaml {worker: {max_queue_size: $(var max_image_queue_size), image_separation_s: $(var min_separation_s)}}
        --config-utilities-yaml {image_rotator: {rotation: $(var rotation_type)}}
      composable_node:
        - unless: $(var use_prerecorded)
          pkg: semantic_inference_ros
          plugin: semantic_inference::SegmentationNode
          name: semantic_inference
          extra_arg:
            - {name: forward_global_arguments, value: 'true'}
        - if: $(var use_prerecorded)
          pkg: semantic_inference_ros
          plugin: semantic_inference::RelabelNode
          name: semantic_inference
          extra_arg:
            - {name: forward_global_arguments, value: 'true'}
  - arg: {name: run_backprojection, default: 'false', description: Triggers decompression for RGB stream}
  - arg: {name: backprojection_config, default: '{}', description: Extra parameters for backprojection}
  - node:  # 2D semantic segmentation
      pkg: semantic_inference_ros
      exec: backprojection_node
      name: semantic_projector
      args: |
        --config-utilities-yaml {recolor: {colormap_path: $(var colormap_path)}}
        --config-utilities-yaml $(var backprojection_config)
      if: $(var run_backprojection)

