#!/usr/bin/env python3
"""Add the contents of one bag to another."""
import rosbag
import click
import pathlib
import tqdm


@click.command()
@click.argument("from-bag", type=click.Path(exists=True))
@click.argument("to-bag", type=click.Path(exists=True))
@click.argument("topics", nargs=-1, type=str)
@click.option(
    "-d",
    "--dry-run",
    is_flag=True,
    default=False,
    help="show information without running",
)
def main(from_bag, to_bag, topics, dry_run):
    """
    Copy messages from FROM_BAG to TO_BAG.

    \b
    FROM_BAG: Path to bag to copy from
    TO_BAG: Path to bag to copy to
    TOPICS: Topics to copy from FROM_BAG to TO_BAG. Defaults to all topics

    Note that topics can be specified with an optional remapping (from_name[:to_name])
    """
    from_bag = str(pathlib.Path(from_bag).expanduser().absolute())
    to_bag = str(pathlib.Path(to_bag).expanduser().absolute())
    name_pairs = [
        (x, x) if ":" not in x else (x.split(":")[0], x.split(":")[1]) for x in topics
    ]
    topic_map = {x[0]: x[1] for x in name_pairs}

    click.secho(f"FROM_BAG: {from_bag}", fg="green")
    click.secho(f"TO_BAG: {to_bag}", fg="green")
    if len(topics) == 0:
        click.secho("Copying all message", fg="green")
    else:
        click.secho("Copying the following topics:", fg="green")
        for topic, name in topic_map.items():
            if topic == name:
                click.secho(f" - {topic} (no change)", fg="green")
            else:
                click.secho(f" - {topic} â†’  {name}", fg="green")

    if dry_run:
        return

    click.echo("Opening bags...")

    with rosbag.Bag(from_bag, "r") as in_bag, rosbag.Bag(to_bag, "a") as out_bag:
        click.echo("Starting copy")

        topic_filter = None if len(topics) == 0 else [x for x in topic_map]
        bag_iter = in_bag.read_messages(topics=topic_filter)
        num_messsages = in_bag.get_message_count(topic_filters=topic_filter)
        progress = tqdm.tqdm(bag_iter, total=num_messsages, desc="Copying messages")

        for topic, msg, t in progress:
            new_topic = topic_map.get(topic, topic)
            out_bag.write(new_topic, msg, t)


if __name__ == "__main__":
    main()
