#!/usr/bin/env python3
"""Node that runs openset segmentation."""
from dataclasses import dataclass, field

import rclpy
from rclpy.node import Node

import semantic_inference.models as models
import semantic_inference_ros
import torch
from semantic_inference import Config
from semantic_inference_msgs.msg import FeatureImage, FeatureVectorStamped
from semantic_inference_ros import Conversions, ImageWorkerConfig


@dataclass
class OpenSetNodeConfig(Config):
    """Configuration for ClipPublisherNode."""

    worker: ImageWorkerConfig = field(default_factory=ImageWorkerConfig)
    model: models.OpensetSegmenterConfig = field(
        default_factory=models.OpensetSegmenterConfig
    )


class OpenSetNode(Node):
    """Node to run openset segmentation."""

    def __init__(self):
        """Start subscriber and publisher."""
        super(OpenSetNode, self).__init__("open_set_node")
        self.config = semantic_inference_ros.load_from_ros(OpenSetNodeConfig, ns="~")

        self.get_logger().info(f"Initializing with {self.config.show()}")
        device = models.default_device()
        self._model = models.OpensetSegmenter(self.config.model).to(device)
        self._model.eval()
        self.get_logger().info("Finished initializing!")

        self._pub = self.create_publisher(FeatureImage, "~/semantic/image_raw", 1)
        self._clip_pub = self.create_publisher(
            FeatureVectorStamped, "~/semantic/feature", 1
        )
        self._worker = semantic_inference_ros.ImageWorker(
            self, self.config.worker, "~/color/image_raw", self._spin_once
        )
        self._embedder = semantic_inference_ros.PromptEncoder(self, self._model.encoder)

    def _spin_once(self, header, img):
        with torch.no_grad():
            ret = self._model.segment(img, is_rgb_order=True).cpu()

        msg = Conversions.to_feature_image(header, ret)
        self._pub.publish(msg)
        self._clip_pub.publish(
            Conversions.to_stamped_feature(header, ret.image_embedding)
        )

    def stop(self):
        """Stop the underlying image worker."""
        self._worker.stop()


def main():
    """Start a node."""
    rclpy.init()

    node = None
    try:
        node = OpenSetNode()
        semantic_inference_ros.setup_ros_log_forwarding(node)
        rclpy.spin(node)
    finally:
        rclpy.try_shutdown()
        if node is not None:
            node.stop()


if __name__ == "__main__":
    main()
