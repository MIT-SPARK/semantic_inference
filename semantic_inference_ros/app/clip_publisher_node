#!/usr/bin/env python3
"""Script to parse a rosbag and produce a timestamped list of clip vectors."""

from dataclasses import dataclass, field

import rclpy
import torch
from rclpy.node import Node

import semantic_inference.models as models
import semantic_inference_ros
from semantic_inference import Config
from semantic_inference_msgs.msg import FeatureVectorStamped
from semantic_inference_ros import Conversions, ImageWorkerConfig


@dataclass
class ClipPublisherConfig(Config):
    """Configuration for ClipPublisherNode."""

    worker: ImageWorkerConfig = field(default_factory=ImageWorkerConfig)
    model: models.ClipConfig = field(default_factory=models.ClipConfig)


class ClipPublisherNode(Node):
    """Node that publishes image feature embeddings."""

    def __init__(self):
        """Start subscriber and publisher."""
        super(ClipPublisherNode, self).__init__("clip_publisher_node")
        config = semantic_inference_ros.load_from_ros(ClipPublisherConfig, "~")

        self.get_logger().info(f"Initializing with {config}")
        self._device = models.default_device()
        self._model = models.ClipWrapper(config.model).to(self._device)
        self._model.eval()
        self._transform = models.get_image_preprocessor(self._model.input_size)
        self._transform = self._transform.to(self._device)
        self.get_logger().info("Finished initializing!")

        self._pub = self.create_publisher(FeatureVectorStamped, "~/feature", 1)
        self._worker = semantic_inference_ros.ImageWorker(
            self, config.worker, "~/image", self._spin_once
        )

    def _spin_once(self, header, img):
        # TODO(nathan) check bgr vs rgb
        with torch.no_grad():
            img = torch.from_numpy(img).to(self._device).permute((2, 0, 1))
            img = models.center_crop(self._transform(img), self._model.input_size)
            feature = torch.squeeze(self._model(img.unsqueeze(0)).cpu())

        msg = Conversions.to_stamped_feature(header, feature)
        self._pub.publish(msg)

    def stop(self):
        """Stop the underlying image worker."""
        self._worker.stop()


def main():
    """Start a node."""
    rclpy.init()

    node = None
    try:
        node = ClipPublisherNode()
        semantic_inference_ros.setup_ros_log_forwarding(node)
        rclpy.spin(node)
    finally:
        rclpy.try_shutdown()
        if node is not None:
            node.stop()


if __name__ == "__main__":
    main()
